{"meta":{"title":"编程记","subtitle":"编程生活","description":"记录每次的编程代码","author":"区区小生","url":"https://baxiprince.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-03-11T12:45:47.421Z","updated":"2020-03-11T08:41:22.906Z","comments":false,"path":"/404.html","permalink":"https://baxiprince.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-03-12T02:22:03.052Z","updated":"2020-03-12T02:22:03.052Z","comments":false,"path":"about/index.html","permalink":"https://baxiprince.github.io/about/index.html","excerpt":"","text":"我想大部分人都知道通常一个程序员会具有的美德。当然了，有三种：懒惰，暴躁，傲慢。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253 .::::. .::::::::. ::::::::::: 既然来了就留下吧! ..:::::::::::' '::::::::::::' .:::::::::: '::::::::::::::.. ..::::::::::::. ``:::::::::::::::: ::::``:::::::::' .:::. ::::' ':::::' .::::::::. .::::' :::: .:::::::'::::. .:::' ::::: .:::::::::' ':::::. .::' :::::.:::::::::' ':::::. .::' ::::::::::::::' ``::::. ...::: ::::::::::::' ``::. ```` ':. ':::::::::' ::::.. '.:::::' ':'````.. 致终于来到这里的勇敢的人： 你是被上帝选中的人，是英勇的、不敌辛苦的、不眠不休的来修改我们这最棘手的代码的编程骑士。 你，我们的救世主，人中之龙，我要对你说：永远不要放弃，永远不要对自己失望，永远不要逃走，辜负了自己， 永远不要哭啼，永远不要说再见，永远不要说谎来伤害自己。==============================================================================================================================================================================================&#123; name: '区区小生' age: 26, gender: '男', profession: 'IE--&gt;IT', experience: '2年', address: '广东省江门市', education: '大专', blog: 'https://baxiprince.github.io/', email: '463550067@qq.com', description: '致力于分享VBA,VB6,VB.NET,B4A源码及互相交流.', skills: [ ['vba', 'Javascript', 'vb6', 'vb.net', 'b4a', 'php'], ['python', 'html','MYSQL'], ], devTools: [ ['Sublime Text', 'Visual Studio Code', 'Notepad++'], ['Chrome DevTools', 'Fiddler'], ['VS 2019', 'Navicat'], ] &#125;"},{"title":"书单","date":"2020-03-11T11:18:40.183Z","updated":"2020-03-11T08:41:22.907Z","comments":false,"path":"books/index.html","permalink":"https://baxiprince.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-03-11T10:17:39.173Z","updated":"2020-03-11T08:57:52.823Z","comments":false,"path":"categories/index.html","permalink":"https://baxiprince.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-03-11T10:17:46.300Z","updated":"2020-03-11T08:41:22.908Z","comments":true,"path":"links/index.html","permalink":"https://baxiprince.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-11T13:59:48.943Z","updated":"2020-03-11T13:59:48.943Z","comments":false,"path":"tags/index.html","permalink":"https://baxiprince.github.io/tags/index.html","excerpt":"","text":""},{"title":"GitHub项目","date":"2020-03-11T11:47:44.255Z","updated":"2020-03-11T11:47:44.255Z","comments":false,"path":"repository/index.html","permalink":"https://baxiprince.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"B4A 关闭严格模式","slug":"B4A_close_ygms","date":"2020-03-12T02:26:03.000Z","updated":"2020-03-12T02:26:03.000Z","comments":true,"path":"2020/03/12/B4A_close_ygms/","link":"","permalink":"https://baxiprince.github.io/2020/03/12/B4A_close_ygms/","excerpt":"","text":"12345678910111213Sub DisableStrictMode '关闭严格模式 Dim jo As JavaObject jo.InitializeStatic(\"android.os.Build.VERSION\") If jo.GetField(\"SDK_INT\") &gt; 9 Then Dim policy As JavaObject policy = policy.InitializeNewInstance(\"android.os.StrictMode.ThreadPolicy.Builder\", Null) policy = policy.RunMethodJO(\"permitAll\", Null).RunMethodJO(\"build\", Null) Dim sm As JavaObject sm.InitializeStatic(\"android.os.StrictMode\").RunMethod(\"setThreadPolicy\", Array(policy)) End IfEnd Sub","categories":[{"name":"B4A","slug":"B4A","permalink":"https://baxiprince.github.io/categories/B4A/"}],"tags":[{"name":"B4A","slug":"B4A","permalink":"https://baxiprince.github.io/tags/B4A/"}]},{"title":"CMD 获取本地wifi密码","slug":"CMD_GET_WIFI_PASS","date":"2020-03-12T02:26:03.000Z","updated":"2020-03-12T02:26:03.000Z","comments":true,"path":"2020/03/12/CMD_GET_WIFI_PASS/","link":"","permalink":"https://baxiprince.github.io/2020/03/12/CMD_GET_WIFI_PASS/","excerpt":"","text":"123获取wifi网络列表: netsh.exe wlan show profile获取指定wifi名的信息包括密码: netsh.exe wlan show profile wifi名称 key=clear","categories":[{"name":"CMD","slug":"CMD","permalink":"https://baxiprince.github.io/categories/CMD/"}],"tags":[{"name":"wifi","slug":"wifi","permalink":"https://baxiprince.github.io/tags/wifi/"},{"name":"CMD","slug":"CMD","permalink":"https://baxiprince.github.io/tags/CMD/"}]},{"title":"B4A打开文件夹","slug":"B4A_open_fd","date":"2020-03-12T02:17:03.000Z","updated":"2020-03-12T02:17:03.000Z","comments":true,"path":"2020/03/12/B4A_open_fd/","link":"","permalink":"https://baxiprince.github.io/2020/03/12/B4A_open_fd/","excerpt":"","text":"123456789Try Dim i As Intent i.Initialize(i.ACTION_VIEW, \"file://\" &amp; File.DirRootExternal&amp;\"/保存目录/\" ) i.SetType( \"resource/folder\" ) StartActivity(i)Catch Msgbox(\"Missing default file explorer\", \"Error\")End Try","categories":[{"name":"B4A","slug":"B4A","permalink":"https://baxiprince.github.io/categories/B4A/"}],"tags":[{"name":"B4A","slug":"B4A","permalink":"https://baxiprince.github.io/tags/B4A/"}]},{"title":"VBA_MD5算法","slug":"VBA_MD5","date":"2020-03-11T14:03:03.000Z","updated":"2020-03-11T14:03:03.000Z","comments":true,"path":"2020/03/11/VBA_MD5/","link":"","permalink":"https://baxiprince.github.io/2020/03/11/VBA_MD5/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373Private Const BITS_TO_A_BYTE = 8Private Const BYTES_TO_A_WORD = 4Private Const BITS_TO_A_WORD = 32Private m_lOnBits(30)Private m_l2Power(30)Private Function LShift(lValue, iShiftBits) If iShiftBits = 0 Then LShift = lValue Exit Function ElseIf iShiftBits = 31 Then If lValue And 1 Then LShift = &amp;H80000000 Else LShift = 0 End If Exit Function ElseIf iShiftBits &lt; 0 Or iShiftBits &gt; 31 Then Err.Raise 6 End If If (lValue And m_l2Power(31 - iShiftBits)) Then LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * m_l2Power(iShiftBits)) Or &amp;H80000000 Else LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * m_l2Power(iShiftBits)) End IfEnd FunctionPrivate Function RShift(lValue, iShiftBits) If iShiftBits = 0 Then RShift = lValue Exit Function ElseIf iShiftBits = 31 Then If lValue And &amp;H80000000 Then RShift = 1 Else RShift = 0 End If Exit Function ElseIf iShiftBits &lt; 0 Or iShiftBits &gt; 31 Then Err.Raise 6 End If RShift = (lValue And &amp;H7FFFFFFE) \\ m_l2Power(iShiftBits) If (lValue And &amp;H80000000) Then RShift = (RShift Or (&amp;H40000000 \\ m_l2Power(iShiftBits - 1))) End IfEnd FunctionPrivate Function RotateLeft(lValue, iShiftBits) RotateLeft = LShift(lValue, iShiftBits) Or RShift(lValue, (32 - iShiftBits))End FunctionPrivate Function AddUnsigned(lX, lY) Dim lX4 Dim lY4 Dim lX8 Dim lY8 Dim lResult lX8 = lX And &amp;H80000000 lY8 = lY And &amp;H80000000 lX4 = lX And &amp;H40000000 lY4 = lY And &amp;H40000000 lResult = (lX And &amp;H3FFFFFFF) + (lY And &amp;H3FFFFFFF) If lX4 And lY4 Then lResult = lResult Xor &amp;H80000000 Xor lX8 Xor lY8 ElseIf lX4 Or lY4 Then If lResult And &amp;H40000000 Then lResult = lResult Xor &amp;HC0000000 Xor lX8 Xor lY8 Else lResult = lResult Xor &amp;H40000000 Xor lX8 Xor lY8 End If Else lResult = lResult Xor lX8 Xor lY8 End If AddUnsigned = lResultEnd FunctionPrivate Function md5_F(x, y, z) md5_F = (x And y) Or ((Not x) And z)End FunctionPrivate Function md5_G(x, y, z) md5_G = (x And z) Or (y And (Not z))End FunctionPrivate Function md5_H(x, y, z) md5_H = (x Xor y Xor z)End FunctionPrivate Function md5_I(x, y, z) md5_I = (y Xor (x Or (Not z)))End FunctionPrivate Sub md5_FF(a, b, c, d, x, s, ac) a = AddUnsigned(a, AddUnsigned(AddUnsigned(md5_F(b, c, d), x), ac)) a = RotateLeft(a, s) a = AddUnsigned(a, b)End SubPrivate Sub md5_GG(a, b, c, d, x, s, ac) a = AddUnsigned(a, AddUnsigned(AddUnsigned(md5_G(b, c, d), x), ac)) a = RotateLeft(a, s) a = AddUnsigned(a, b)End SubPrivate Sub md5_HH(a, b, c, d, x, s, ac) a = AddUnsigned(a, AddUnsigned(AddUnsigned(md5_H(b, c, d), x), ac)) a = RotateLeft(a, s) a = AddUnsigned(a, b)End SubPrivate Sub md5_II(a, b, c, d, x, s, ac) a = AddUnsigned(a, AddUnsigned(AddUnsigned(md5_I(b, c, d), x), ac)) a = RotateLeft(a, s) a = AddUnsigned(a, b)End SubPrivate Function ConvertToWordArray(sMessage) Dim lMessageLength Dim lNumberOfWords Dim lWordArray() Dim lBytePosition Dim lByteCount Dim lWordCount Const MODULUS_BITS = 512 Const CONGRUENT_BITS = 448 lMessageLength = Len(sMessage) lNumberOfWords = (((lMessageLength + ((MODULUS_BITS - CONGRUENT_BITS) \\ BITS_TO_A_BYTE)) \\ (MODULUS_BITS \\ BITS_TO_A_BYTE)) + 1) * (MODULUS_BITS \\ BITS_TO_A_WORD) ReDim lWordArray(lNumberOfWords - 1) lBytePosition = 0 lByteCount = 0 Do Until lByteCount &gt;= lMessageLength lWordCount = lByteCount \\ BYTES_TO_A_WORD lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(Asc(Mid(sMessage, lByteCount + 1, 1)), lBytePosition) lByteCount = lByteCount + 1 Loop lWordCount = lByteCount \\ BYTES_TO_A_WORD lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(&amp;H80, lBytePosition) lWordArray(lNumberOfWords - 2) = LShift(lMessageLength, 3) lWordArray(lNumberOfWords - 1) = RShift(lMessageLength, 29) ConvertToWordArray = lWordArrayEnd FunctionPrivate Function WordToHex(lValue) Dim lByte Dim lCount For lCount = 0 To 3 lByte = RShift(lValue, lCount * BITS_TO_A_BYTE) And m_lOnBits(BITS_TO_A_BYTE - 1) WordToHex = WordToHex &amp; Right(\"0\" &amp; Hex(lByte), 2) NextEnd FunctionPublic Function MD5(sMessage, stype) m_lOnBits(0) = CLng(1) m_lOnBits(1) = CLng(3) m_lOnBits(2) = CLng(7) m_lOnBits(3) = CLng(15) m_lOnBits(4) = CLng(31) m_lOnBits(5) = CLng(63) m_lOnBits(6) = CLng(127) m_lOnBits(7) = CLng(255) m_lOnBits(8) = CLng(511) m_lOnBits(9) = CLng(1023) m_lOnBits(10) = CLng(2047) m_lOnBits(11) = CLng(4095) m_lOnBits(12) = CLng(8191) m_lOnBits(13) = CLng(16383) m_lOnBits(14) = CLng(32767) m_lOnBits(15) = CLng(65535) m_lOnBits(16) = CLng(131071) m_lOnBits(17) = CLng(262143) m_lOnBits(18) = CLng(524287) m_lOnBits(19) = CLng(1048575) m_lOnBits(20) = CLng(2097151) m_lOnBits(21) = CLng(4194303) m_lOnBits(22) = CLng(8388607) m_lOnBits(23) = CLng(16777215) m_lOnBits(24) = CLng(33554431) m_lOnBits(25) = CLng(67108863) m_lOnBits(26) = CLng(134217727) m_lOnBits(27) = CLng(268435455) m_lOnBits(28) = CLng(536870911) m_lOnBits(29) = CLng(1073741823) m_lOnBits(30) = CLng(2147483647) m_l2Power(0) = CLng(1) m_l2Power(1) = CLng(2) m_l2Power(2) = CLng(4) m_l2Power(3) = CLng(8) m_l2Power(4) = CLng(16) m_l2Power(5) = CLng(32) m_l2Power(6) = CLng(64) m_l2Power(7) = CLng(128) m_l2Power(8) = CLng(256) m_l2Power(9) = CLng(512) m_l2Power(10) = CLng(1024) m_l2Power(11) = CLng(2048) m_l2Power(12) = CLng(4096) m_l2Power(13) = CLng(8192) m_l2Power(14) = CLng(16384) m_l2Power(15) = CLng(32768) m_l2Power(16) = CLng(65536) m_l2Power(17) = CLng(131072) m_l2Power(18) = CLng(262144) m_l2Power(19) = CLng(524288) m_l2Power(20) = CLng(1048576) m_l2Power(21) = CLng(2097152) m_l2Power(22) = CLng(4194304) m_l2Power(23) = CLng(8388608) m_l2Power(24) = CLng(16777216) m_l2Power(25) = CLng(33554432) m_l2Power(26) = CLng(67108864) m_l2Power(27) = CLng(134217728) m_l2Power(28) = CLng(268435456) m_l2Power(29) = CLng(536870912) m_l2Power(30) = CLng(1073741824) Dim x Dim k Dim AA Dim BB Dim CC Dim DD Dim a Dim b Dim c Dim d Const S11 = 7 Const S12 = 12 Const S13 = 17 Const S14 = 22 Const S21 = 5 Const S22 = 9 Const S23 = 14 Const S24 = 20 Const S31 = 4 Const S32 = 11 Const S33 = 16 Const S34 = 23 Const S41 = 6 Const S42 = 10 Const S43 = 15 Const S44 = 21 x = ConvertToWordArray(sMessage) a = &amp;H67452301 b = &amp;HEFCDAB89 c = &amp;H98BADCFE d = &amp;H10325476 For k = 0 To UBound(x) Step 16 AA = a BB = b CC = c DD = d md5_FF a, b, c, d, x(k + 0), S11, &amp;HD76AA478 md5_FF d, a, b, c, x(k + 1), S12, &amp;HE8C7B756 md5_FF c, d, a, b, x(k + 2), S13, &amp;H242070DB md5_FF b, c, d, a, x(k + 3), S14, &amp;HC1BDCEEE md5_FF a, b, c, d, x(k + 4), S11, &amp;HF57C0FAF md5_FF d, a, b, c, x(k + 5), S12, &amp;H4787C62A md5_FF c, d, a, b, x(k + 6), S13, &amp;HA8304613 md5_FF b, c, d, a, x(k + 7), S14, &amp;HFD469501 md5_FF a, b, c, d, x(k + 8), S11, &amp;H698098D8 md5_FF d, a, b, c, x(k + 9), S12, &amp;H8B44F7AF md5_FF c, d, a, b, x(k + 10), S13, &amp;HFFFF5BB1 md5_FF b, c, d, a, x(k + 11), S14, &amp;H895CD7BE md5_FF a, b, c, d, x(k + 12), S11, &amp;H6B901122 md5_FF d, a, b, c, x(k + 13), S12, &amp;HFD987193 md5_FF c, d, a, b, x(k + 14), S13, &amp;HA679438E md5_FF b, c, d, a, x(k + 15), S14, &amp;H49B40821 md5_GG a, b, c, d, x(k + 1), S21, &amp;HF61E2562 md5_GG d, a, b, c, x(k + 6), S22, &amp;HC040B340 md5_GG c, d, a, b, x(k + 11), S23, &amp;H265E5A51 md5_GG b, c, d, a, x(k + 0), S24, &amp;HE9B6C7AA md5_GG a, b, c, d, x(k + 5), S21, &amp;HD62F105D md5_GG d, a, b, c, x(k + 10), S22, &amp;H2441453 md5_GG c, d, a, b, x(k + 15), S23, &amp;HD8A1E681 md5_GG b, c, d, a, x(k + 4), S24, &amp;HE7D3FBC8 md5_GG a, b, c, d, x(k + 9), S21, &amp;H21E1CDE6 md5_GG d, a, b, c, x(k + 14), S22, &amp;HC33707D6 md5_GG c, d, a, b, x(k + 3), S23, &amp;HF4D50D87 md5_GG b, c, d, a, x(k + 8), S24, &amp;H455A14ED md5_GG a, b, c, d, x(k + 13), S21, &amp;HA9E3E905 md5_GG d, a, b, c, x(k + 2), S22, &amp;HFCEFA3F8 md5_GG c, d, a, b, x(k + 7), S23, &amp;H676F02D9 md5_GG b, c, d, a, x(k + 12), S24, &amp;H8D2A4C8A md5_HH a, b, c, d, x(k + 5), S31, &amp;HFFFA3942 md5_HH d, a, b, c, x(k + 8), S32, &amp;H8771F681 md5_HH c, d, a, b, x(k + 11), S33, &amp;H6D9D6122 md5_HH b, c, d, a, x(k + 14), S34, &amp;HFDE5380C md5_HH a, b, c, d, x(k + 1), S31, &amp;HA4BEEA44 md5_HH d, a, b, c, x(k + 4), S32, &amp;H4BDECFA9 md5_HH c, d, a, b, x(k + 7), S33, &amp;HF6BB4B60 md5_HH b, c, d, a, x(k + 10), S34, &amp;HBEBFBC70 md5_HH a, b, c, d, x(k + 13), S31, &amp;H289B7EC6 md5_HH d, a, b, c, x(k + 0), S32, &amp;HEAA127FA md5_HH c, d, a, b, x(k + 3), S33, &amp;HD4EF3085 md5_HH b, c, d, a, x(k + 6), S34, &amp;H4881D05 md5_HH a, b, c, d, x(k + 9), S31, &amp;HD9D4D039 md5_HH d, a, b, c, x(k + 12), S32, &amp;HE6DB99E5 md5_HH c, d, a, b, x(k + 15), S33, &amp;H1FA27CF8 md5_HH b, c, d, a, x(k + 2), S34, &amp;HC4AC5665 md5_II a, b, c, d, x(k + 0), S41, &amp;HF4292244 md5_II d, a, b, c, x(k + 7), S42, &amp;H432AFF97 md5_II c, d, a, b, x(k + 14), S43, &amp;HAB9423A7 md5_II b, c, d, a, x(k + 5), S44, &amp;HFC93A039 md5_II a, b, c, d, x(k + 12), S41, &amp;H655B59C3 md5_II d, a, b, c, x(k + 3), S42, &amp;H8F0CCC92 md5_II c, d, a, b, x(k + 10), S43, &amp;HFFEFF47D md5_II b, c, d, a, x(k + 1), S44, &amp;H85845DD1 md5_II a, b, c, d, x(k + 8), S41, &amp;H6FA87E4F md5_II d, a, b, c, x(k + 15), S42, &amp;HFE2CE6E0 md5_II c, d, a, b, x(k + 6), S43, &amp;HA3014314 md5_II b, c, d, a, x(k + 13), S44, &amp;H4E0811A1 md5_II a, b, c, d, x(k + 4), S41, &amp;HF7537E82 md5_II d, a, b, c, x(k + 11), S42, &amp;HBD3AF235 md5_II c, d, a, b, x(k + 2), S43, &amp;H2AD7D2BB md5_II b, c, d, a, x(k + 9), S44, &amp;HEB86D391 a = AddUnsigned(a, AA) b = AddUnsigned(b, BB) c = AddUnsigned(c, CC) d = AddUnsigned(d, DD) Next If stype = 32 Then MD5 = LCase(WordToHex(a) &amp; WordToHex(b) &amp; WordToHex(c) &amp; WordToHex(d)) Else MD5 = LCase(WordToHex(b) &amp; WordToHex(c)) End IfEnd Function'MD5是message-digest algorithm 5（信息-摘要算法）的缩写，被广泛用于加密和解密技术上，'它可以说是文件的\"数字指纹\"。任何一个文件，无论是可执行程序、图像文件、临时文件或者'其他任何类型的文件，也不管它体积多大，都有且只有一个独一无二的MD5信息值，并且如果这'个文件被修改过，它的MD5值也将随之改变。因此，我们可以通过对比同一文件的MD5值，来校验'这个文件是否被\"篡改\"过！''在各种登陆系统中，用户密码的md5加密是不可少的。这么说吧，即使你通过各种手段看到了用户'的登陆密码，但那一串古古怪怪的东西你也不可能知道它是什么，这就是保护。md5加密运算是不'可逆的，就是说你不能通过那一串古古怪怪的东西算出它原始的样子。下面是完整的md5代码，不'要去理解算法了，用到时拿去直接调用Sub test1() '只加密字符串 Debug.Print MD5(\"a\", 16) '16位加密 Debug.Print MD5(\"a\", 32) '32位加密End Sub","categories":[{"name":"VB","slug":"VB","permalink":"https://baxiprince.github.io/categories/VB/"}],"tags":[{"name":"VBA","slug":"VBA","permalink":"https://baxiprince.github.io/tags/VBA/"}]},{"title":"VBA_连接oracle数据库","slug":"VBA_con_oracel","date":"2020-03-11T14:03:03.000Z","updated":"2020-03-11T14:03:03.000Z","comments":true,"path":"2020/03/11/VBA_con_oracel/","link":"","permalink":"https://baxiprince.github.io/2020/03/11/VBA_con_oracel/","excerpt":"","text":"12345678910111213141516Public CNN As ADODB.ConnectionSub 连接数据库() Dim DataSource As String DataSource = Chr(34) &amp; \"(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=111.111.111.111)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=ser_name)))\" &amp; Chr(34) If CNN Is Nothing Then Set CNN = New ADODB.Connection With CNN .ConnectionString = \"Provider=MSDAORA.1; user id=userid; password=Password; data source = \" &amp; DataSource &amp; \"; Persist Security Info=True\" .Open End With Else If CNN.State &lt;&gt; 1 Then CNN.Open End If End IfEnd Sub","categories":[{"name":"VB","slug":"VB","permalink":"https://baxiprince.github.io/categories/VB/"}],"tags":[{"name":"VBA","slug":"VBA","permalink":"https://baxiprince.github.io/tags/VBA/"}]},{"title":"VBA_破解密码保护内容的excel表格","slug":"vba_clear_password","date":"2020-03-11T14:03:03.000Z","updated":"2020-03-11T14:03:03.000Z","comments":true,"path":"2020/03/11/vba_clear_password/","link":"","permalink":"https://baxiprince.github.io/2020/03/11/vba_clear_password/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211Sub Macro1() ' ' Breaks worksheet and workbook structure passwords. Jason S ' probably originator of base code algorithm modified for coverage ' of workbook structure / windows passwords and for multiple passwords ' Jason S http://jsbi.blogspot.com ' Reveals hashed passwords NOT original passwords Const DBLSPACE As String = vbNewLine &amp; vbNewLine Const AUTHORS As String = DBLSPACE &amp; vbNewLine &amp; \"Adapted from Bob McCormick base code by\" &amp; \"Jason S http://jsbi.blogspot.com\" Const HEADER As String = \"AllInternalPasswords User Message\" Const VERSION As String = DBLSPACE &amp; \"Version 1.0 8 Sep 2008\" Const REPBACK As String = DBLSPACE &amp; \"Please report failure to jasonblr@gmail.com \" Const ALLCLEAR As String = DBLSPACE &amp; \"The workbook should be cleared\" Const MSGNOPWORDS1 As String = \"There were no passwords on \" &amp; AUTHORS &amp; VERSION Const MSGNOPWORDS2 As String = \"There was no protection to \" &amp; \"workbook structure or windows.\" &amp; DBLSPACE Const MSGTAKETIME As String = \"After pressing OK button this \" &amp; \"will take some time.\" &amp; DBLSPACE &amp; \"Amount of time \" &amp; \"depends on how many different passwords, the \" Const MSGPWORDFOUND1 As String = \"You had a Worksheet \" &amp; \"Structure or Windows Password set.\" &amp; DBLSPACE &amp; \"The password found was: \" &amp; DBLSPACE &amp; \"$$\" &amp; DBLSPACE &amp; \"Note it down for potential future use in other workbooks by \" &amp; \"the same person who set this password.\" &amp; DBLSPACE &amp; \"Now to check and clear other passwords.\" &amp; AUTHORS &amp; VERSION Const MSGPWORDFOUND2 As String = \"You had a Worksheet \" &amp; \"password set.\" &amp; DBLSPACE &amp; \"The password found was: \" &amp; DBLSPACE &amp; \"$$\" &amp; DBLSPACE &amp; \"Note it down for potential \" &amp; \"future use in other workbooks by same person who \" &amp; \"set this password.\" &amp; DBLSPACE &amp; \"Now to check and clear \" &amp; \"other passwords.\" &amp; AUTHORS &amp; VERSION Const MSGONLYONE As String = \"Only structure / windows \" &amp; \"protected with the password that was just found.\" &amp; ALLCLEAR &amp; AUTHORS &amp; VERSION &amp; REPBACK Dim w1 As Worksheet, w2 As Worksheet Dim i As Integer, j As Integer, k As Integer, l As Integer Dim m As Integer, n As Integer, i1 As Integer, i2 As Integer Dim i3 As Integer, i4 As Integer, i5 As Integer, i6 As Integer Dim PWord1 As String Dim ShTag As Boolean, WinTag As Boolean Application.ScreenUpdating = False With ActiveWorkbook WinTag = .ProtectStructure Or .ProtectWindows End With ShTag = False For Each w1 In Worksheets ShTag = ShTag Or w1.ProtectContents Next w1 If Not ShTag And Not WinTag Then MsgBox MSGNOPWORDS1, vbInformation, HEADER Exit Sub End If MsgBox MSGTAKETIME, vbInformation, HEADER If Not WinTag Then MsgBox MSGNOPWORDS2, vbInformation, HEADER Else On Error Resume Next Do 'dummy do loop For i = 65 To 66: For j = 65 To 66: For k = 65 To 66 For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66 For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66 For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126 With ActiveWorkbook .Unprotect Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n) If .ProtectStructure = False And .ProtectWindows = False Then PWord1 = Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n) MsgBox Application.Substitute(MSGPWORDFOUND1, \"$$\", PWord1), vbInformation, HEADER Exit Do 'Bypass all for...nexts End If End With Next: Next: Next: Next: Next: Next Next: Next: Next: Next: Next: Next Loop Until True On Error GoTo 0 End If If WinTag And Not ShTag Then MsgBox MSGONLYONE, vbInformation, HEADER Exit Sub End If On Error Resume Next For Each w1 In Worksheets 'Attempt clearance with PWord1 w1.Unprotect PWord1 Next w1 On Error GoTo 0 ShTag = False For Each w1 In Worksheets 'Checks for all clear ShTag triggered to 1 if not. ShTag = ShTag Or w1.ProtectContents Next w1 If ShTag Then For Each w1 In Worksheets With w1 If .ProtectContents Then On Error Resume Next Do 'Dummy do loop For i = 65 To 66: For j = 65 To 66: For k = 65 To 66 For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66 For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66 For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126 .Unprotect Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n) If Not .ProtectContents Then PWord1 = Chr(i) &amp; Chr(j) &amp; Chr(k) &amp; Chr(l) &amp; Chr(m) &amp; Chr(i1) &amp; Chr(i2) &amp; Chr(i3) &amp; Chr(i4) &amp; Chr(i5) &amp; Chr(i6) &amp; Chr(n) MsgBox Application.Substitute(MSGPWORDFOUND2, \"$$\", PWord1), vbInformation, HEADER 'leverage finding Pword by trying on other sheets For Each w2 In Worksheets w2.Unprotect PWord1 Next w2 Exit Do 'Bypass all for...nexts End If Next: Next: Next: Next: Next: Next Next: Next: Next: Next: Next: Next Loop Until True On Error GoTo 0 End If End With Next w1 End If MsgBox ALLCLEAR &amp; AUTHORS &amp; VERSION &amp; REPBACK, vbInformation, HEADER ' End Sub","categories":[{"name":"VB","slug":"VB","permalink":"https://baxiprince.github.io/categories/VB/"}],"tags":[{"name":"VBA","slug":"VBA","permalink":"https://baxiprince.github.io/tags/VBA/"}]}]}